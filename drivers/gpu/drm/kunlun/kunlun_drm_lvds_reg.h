/*
* lvds_reg.h
*
* Copyright (c) 2018-2019 Semidrive Semiconductor.
* All rights reserved.
*
* Description: dc register defs file.
*
* Revision History:
* -----------------
* 011, 10/17/2019 BI create this file
*/
#ifndef __LVDS_REG_H__
#define __LVDS_REG_H__
#include "__regs_ap_lvds.h"

/* LVDS registers (RMW mode) definition */

#define REG(x)                      (x)
/* SOFT RESET */
#define LVDS_SOFT_RESET             REG(REG_AP_APB_LVDS_SOFT_RESET)
#define TRIM_MODE_SHIFT             SOFT_RESET_TRIM_MODE_FIELD_OFFSET
#define TRIM_MODE_MASK              TRIM_MODE_SHIFT
#define RTE_CTL_SHIFT               SOFT_RESET_RTE_CTL_FIELD_OFFSET
#define RTE_CTL_MASK                0x1 << RTE_CTL_SHIFT
#define CB_SOFT_RESET_SHIFT         SOFT_RESET_COMBINE_SOFT_RESET_FIELD_OFFSET
#define CB_SOFT_RESET_MASK          0x1 << CB_SOFT_RESET_SHIFT
#define CH3_SOFT_RESET_SHIFT        SOFT_RESET_CH3_SOFT_RESET_FIELD_OFFSET
#define CH3_SOFT_RESET_MASK         0x1 << CH3_SOFT_RESET_SHIFT
#define CH2_SOFT_RESET_SHIFT        SOFT_RESET_CH2_SOFT_RESET_FIELD_OFFSET
#define CH2_SOFT_RESET_MASK         0x1 << CH2_SOFT_RESET_SHIFT
#define CH1_SOFT_RESET_SHIFT        SOFT_RESET_CH1_SOFT_RESET_FIELD_OFFSET
#define CH1_SOFT_RESET_MASK         0x1 << CH1_SOFT_RESET_SHIFT
#define CH0_SOFT_RESET_SHIFT        SOFT_RESET_CH0_SOFT_RESET_FIELD_OFFSET
#define CH0_SOFT_RESET_MASK         0x1 << CH0_SOFT_RESET_SHIFT

/*MUX SEL*/
#define LVDS_MUX_SEL                REG(REG_AP_APB_LVDS_MUX_SEL)
#define MUX8_SEL_SHIFT              MUX_SEL_MUX8_SEL_FIELD_OFFSET
#define MUX8_SEL_MASH               0x3 << MUX8_SEL_SHIFT
#define MUX7_SEL_SHIFT              MUX_SEL_MUX7_SEL_FIELD_OFFSET
#define MUX7_SEL_MASH               0x3 << MUX7_SEL_SHIFT
#define MUX6_SEL_SHIFT              MUX_SEL_MUX6_SEL_FIELD_OFFSET
#define MUX6_SEL_MASH               0x3 << MUX6_SEL_SHIFT
#define MUX5_SEL_SHIFT              MUX_SEL_MUX5_SEL_FIELD_OFFSET
#define MUX5_SEL_MASH               0x3 << MUX5_SEL_SHIFT
#define MUX4_SEL_SHIFT              MUX_SEL_MUX4_SEL_FIELD_OFFSET
#define MUX4_SEL_MASH               0x1 << MUX4_SEL_SHIFT
#define MUX3_SEL_SHIFT              MUX_SEL_MUX3_SEL_FIELD_OFFSET
#define MUX3_SEL_MASH               0x7 << MUX3_SEL_SHIFT
#define MUX2_SEL_SHIFT              MUX_SEL_MUX2_SEL_FIELD_OFFSET
#define MUX2_SEL_MASH               0x7 << MUX2_SEL_SHIFT
#define MUX1_SEL_SHIFT              MUX_SEL_MUX1_SEL_FIELD_OFFSET
#define MUX1_SEL_MASH               0x7 << MUX1_SEL_SHIFT
#define MUX0_SEL_SHIFT              MUX_SEL_MUX0_SEL_FIELD_OFFSET
#define MUX0_SEL_MASH               0x7 << MUX0_SEL_SHIFT

/*LVDS COMBINE*/
#define LVDS_COMBINE                REG(REG_AP_APB_LVDS_LVDS_COMBINE)
#define CMB_ENABLE_SHIFT            LVDS_COMBINE_ENABLE_FIELD_OFFSET
#define CMB_ENABLE_MASK             0x1 << CMB_ENABLE_SHIFT
#define CMB_MODE_SHIFT              LVDS_COMBINE_COMBINE_MODE_FIELD_OFFSET
#define CMB_MODE_MASK               0x1 << CMB_MODE_SHIFT
#define CMB_DATA_EN_POL_SHIFT       LVDS_COMBINE_DATA_EN_POL_FIELD_OFFSET
#define CMB_DATA_EN_POL_MASK        0x1 << CMB_DATA_EN_POL_SHIFT
#define CMB_HSYNC_POL_SHIFT         LVDS_COMBINE_HSYNC_POL_FIELD_OFFSET
#define CMB_HSYNC_POL_MASK          0x1 << CMB_HSYNC_POL_SHIFT
#define CMB_VSYNC_POL_SHIFT         LVDS_COMBINE_VSYNC_POL_FIELD_OFFSET
#define CMB_VSYNC_POL_MASK          0x1 << CMB_VSYNC_POL_SHIFT
#define CMB_CH_SWAP_SHIFT           LVDS_COMBINE_CH_SWAP_FIELD_OFFSET
#define CMB_CH_SWAP_MASK            0x1 << CMB_CH_SWAP_SHIFT
#define CMB_GAP_SHIFT               LVDS_COMBINE_GAP_FIELD_OFFSET
#define CMB_GAP_MASK                0xFF << CMB_GAP_SHIFT
#define CMB_VLD_HEIGHT_SHIFT        LVDS_COMBINE_VLD_HEIGHT_FIELD_OFFSET
#define CMB_VLD_HEIGHT_MASK         0xFFFF << CMB_VLD_HEIGHT_SHIFT

/*LVDS BIAS SET*/
#define LVDS_BIAS_SET               REG(REG_AP_APB_LVDS_LVDS_BIAS_SET)
#define BIAS_TRIM_SHIFT             LVDS_BIAS_SET_BIAS_TRIM_FIELD_OFFSET
#define BIAS_TRIM_MASK              0x3 << BIAS_TRIM_SHIFT
#define BIAS_SELVDD_SHIFT           LVDS_BIAS_SET_BIAS_SELVDD_FIELD_OFFSET
#define BIAS_SELVDD_MASK            0x1 << BIAS_SELVDD_SHIFT
#define BIAS_EN_SHIFT               LVDS_BIAS_SET_BIAS_EN_FIELD_OFFSET
#define BIAS_EN_MASK                0x1 << BIAS_EN_SHIFT

/*TEST CFG*/
#define LVDS_TEST_CFG_0             REG(REG_AP_APB_LVDS_TEST_CFG_0)
#define LVDS_TEST_CFG_1             REG(REG_AP_APB_LVDS_TEST_CFG_1)
#define TEST_CFG_EN_SHIFT           TEST_CFG_0_ENABLE_FIELD_OFFSET
#define TEST_CFG_EN_MASK            0x1 << TEST_CFG_EN_SHIFT
#define TEST_CFG_DATA_SHIFT         TEST_CFG_0_DATA_FIELD_OFFSET
#define TEST_CFG_DATA_MASK          0x7F << TEST_CFG_DATA_SHIFT

/* LVDS CHN */
#define LVDS_CHN_JMP 0x10000
#define LVDS_CHN_COUNT 4

#define LVDS_CHN_CTRL_(i)           (REG(REG_AP_APB_LVDS_LVDS_CH_0) + LVDS_CHN_JMP * i)
#define CHN_EN_SHIFT                LVDS_CH_0_ENABLE_FIELD_OFFSET
#define CHN_EN_MASK                 0x1 << CHN_EN_SHIFT
#define CHN_MUX_SHIFT               LVDS_CH_0_MUX_FIELD_OFFSET
#define CHN_MUX_MASK                0x3 << CHN_MUX_SHIFT
#define CHN_DUALODD_SHIFT           LVDS_CH_0_DUALODD_FIELD_OFFSET
#define CHN_DUALODD_MASK            0x1 << CHN_DUALODD_SHIFT
#define CHN_LANE_UPDATE_SHIFT       LVDS_CH_0_LANE_UPDATE_FIELD_OFFSET
#define CHN_LANE_UPDATE_MASK        0x7FFF << CHN_LANE_UPDATE_SHIFT
#define CHN_FRAME_MASK_SHIFT        LVDS_CH_0_FRAME_MASK_FIELD_OFFSET
#define CHN_FRAME_MASK_MASK         0x3 << CHN_FRAME_MASK_SHIFT
#define CHN_VSYNC_POL_SHIFT         LVDS_CH_0_VSYNC_POL_FIELD_OFFSET
#define CHN_VSYNC_POL_MASK          0x1 << CHN_VSYNC_POL_SHIFT
#define CHN_FORMAT_SHIFT            LVDS_CH_0_FORMAT_FIELD_OFFSET
#define CHN_FORMAT_MASK             0x1 << CHN_FORMAT_SHIFT
#define CHN_BPP_SHIFT               LVDS_CH_0_BPP_FIELD_OFFSET
#define CHN_BPP_MASK                0x3 << CHN_BPP_SHIFT
#define CHN_DUALMODE_SHIFT          LVDS_CH_0_DUALMODE_FIELD_OFFSET
#define CHN_DUALMODE_MASK           0x1 << CHN_DUALMODE_SHIFT

#define LVDS_CHN_CLOCK_(i)          (REG(REG_AP_APB_LVDS_LVDS_CLOCK_0) + LVDS_CHN_JMP * i)
#define CHN_DIV_NUM_DBG_SHIFT       LVDS_CLOCK_0_DIV_NUM_DBG_FIELD_OFFSET
#define CHN_DIV_NUM_DBG_MASK        0xF << CHN_DIV_NUM_DBG_SHIFT
#define CHN_DIV_NUM_LVDS_SHIFT      LVDS_CLOCK_0_DIV_NUM_LVDS_FIELD_OFFSET
#define CHN_DIV_NUM_LVDS_MASK       0xF << CHN_DIV_NUM_LVDS_SHIFT
#define CHN_GATING_AKC_SHIFT        LVDS_CLOCK_0_GATING_ACK_FIELD_OFFSET
#define CHN_GATING_AKC_MASK         0x1 << CHN_GATING_AKC_SHIFT
#define CHN_GATING_EN_SHIFT         LVDS_CLOCK_0_GATING_EN_FIELD_OFFSET
#define CHN_GATING_EN_MASK          0x1F << CHN_GATING_EN_SHIFT
#define CHN_SRC_SEL_SHIFT           LVDS_CLOCK_0_SRC_SEL_FIELD_OFFSET
#define CHN_SRC_SEL_MASK            0x1 << CHN_SRC_SEL_SHIFT

#define LVDS_CHN_PAD_COM_SET_(i)    (REG(REG_AP_APB_LVDS_LVDS_CH0_PAD_COM_SET) + LVDS_CHN_JMP * i)
#define CHN_LVDS_TRIM_SHIFT         LVDS_CH0_PAD_COM_SET_LVDS_TRIM_FIELD_OFFSET
#define CHN_LVDS_TRIM_MASK          0x7 << CHN_LVDS_TRIM_SHIFT
#define CHN_TEST_TXD_P_SHIFT        LVDS_CH0_PAD_COM_SET_TEST_TXD_P_FIELD_OFFSET
#define CHN_TEST_TXD_P_MASK         0x1 << CHN_TEST_TXD_P_SHIFT
#define CHN_TEST_TXD_N_SHIFT        LVDS_CH0_PAD_COM_SET_TEST_TXD_N_FIELD_OFFSET
#define CHN_TEST_TXD_N_MASK         0x1 << CHN_TEST_TXD_N_SHIFT
#define CHN_TEST_SCHMITT_EN_SHIFT   LVDS_CH0_PAD_COM_SET_TEST_SCHMITT_EN_FIELD_OFFSET
#define CHN_TEST_SCHMITT_EN_MASK    0x1 << CHN_TEST_SCHMITT_EN_SHIFT
#define CHN_TEST_RXEN_SHIFT         LVDS_CH0_PAD_COM_SET_TEST_RXEN_FIELD_OFFSET
#define CHN_TEST_RXEN_MASK          0x1 << CHN_TEST_RXEN_SHIFT
#define CHN_TEST_RXCM_EN_SHIFT      LVDS_CH0_PAD_COM_SET_TEST_RXCM_EN_FIELD_OFFSET
#define CHN_TEST_RXCM_EN_MASK       0x1 << CHN_TEST_RXCM_EN_SHIFT
#define CHN_TEST_PULLDN_SHIFT       LVDS_CH0_PAD_COM_SET_TEST_PULLDN_FIELD_OFFSET
#define CHN_TEST_PULLDN_MASK        0x1 << CHN_TEST_PULLDN_SHIFT
#define CHN_TEST_OEN_P_SHIFT        LVDS_CH0_PAD_COM_SET_TEST_OEN_P_FIELD_OFFSET
#define CHN_TEST_OEN_P_MASK         0x1 << CHN_TEST_OEN_P_SHIFT
#define CHN_TEST_OEN_N_SHIFT        LVDS_CH0_PAD_COM_SET_TEST_OEN_N_FIELD_OFFSET
#define CHN_TEST_OEN_N_MASK         0x1 << CHN_TEST_OEN_N_SHIFT
#define CHN_TEST_IEN_P_SHIFT        LVDS_CH0_PAD_COM_SET_TEST_IEN_P_FIELD_OFFSET
#define CHN_TEST_IEN_P_MASK         0x1 << CHN_TEST_IEN_P_SHIFT
#define CHN_TEST_IEN_N_SHIFT        LVDS_CH0_PAD_COM_SET_TEST_IEN_N_FIELD_OFFSET
#define CHN_TEST_IEN_N_MASK         0x1 << CHN_TEST_IEN_N_SHIFT

#define LVDS_CHN_PAD_SET_(i)        (REG(REG_AP_APB_LVDS_LVDS_CH0_PAD_SET) + LVDS_CHN_JMP * i)
#define CHN_RXDA_SHIFT              LVDS_CH0_PAD_SET_RXDA_FIELD_OFFSET
#define CHN_RXDA_MASK               0x1 << CHN_RXDA_SHIFT
#define CHN_RXD_P_SHIFT             LVDS_CH0_PAD_SET_RXD_P_FIELD_OFFSET
#define CHN_RXD_P_MASK              0x1 << CHN_RXD_P_SHIFT
#define CHN_RXD_N_SHIFT             LVDS_CH0_PAD_SET_RXD_N_FIELD_OFFSET
#define CHN_RXD_N_MASK              0x1 << CHN_RXD_N_SHIFT
#define CHN_VBIAS_SEL_SHIFT         LVDS_CH0_PAD_SET_VBIAS_SEL_FIELD_OFFSET
#define CHN_VBIAS_SEL_MASK          0x1 << CHN_VBIAS_SEL_SHIFT
#define CHN_TXEN_SHIFT              LVDS_CH0_PAD_SET_TXEN_FIELD_OFFSET
#define CHN_TXEN_MASK               0x1 << CHN_TXEN_SHIFT
#define CHN_TXDRV_SHIFT             LVDS_CH0_PAD_SET_TXDRV_FIELD_OFFSET
#define CHN_TXDRV_MASK              0xF << CHN_TXDRV_SHIFT
#define CHN_TXCM_SHIFT              LVDS_CH0_PAD_SET_TX_CM_FIELD_OFFSET
#define CHN_TXCM_MASK               0x1 << CHN_TXCM_SHIFT
#define CHN_RTERM_EN_SHIFT          LVDS_CH0_PAD_SET_RTERM_EN_FIELD_OFFSET
#define CHN_RTERM_EN_MASK           0x1 << CHN_RTERM_EN_SHIFT
#define CHN_BIAS_EN_SHIFT           LVDS_CH0_PAD_SET_BIAS_EN_FIELD_OFFSET
#define CHN_BIAS_EN_MASK            0x1 << CHN_BIAS_EN_SHIFT

#endif //__LVDS_REG_H__
